import { GRAVITY, MAX_JUMPS, COLORS } from './constants.js';
import { createPlayer, updatePlayerAnimation, resetPlayer } from './player.js';
import { setupInputListeners, movePlayer, resetKeyStates } from './input.js';
import { handlePunching, shootProjectile, updateProjectiles, projectiles } from './combat.js';
import { drawPlayer, drawPlatform, drawPunch, drawProjectileCharging, drawProjectiles, drawWinnerText } from './renderer.js';

let gameOver = false;
let gameStarted = false;

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const characterSelectScreen = document.getElementById('characterSelectScreen');
const player1ColorOptions = document.getElementById('player1ColorOptions');
const player2ColorOptions = document.getElementById('player2ColorOptions');
const player1Preview = document.getElementById('player1Preview');
const player2Preview = document.getElementById('player2Preview');
const startGameBtn = document.getElementById('startGameBtn');
const restartBtn = document.getElementById('restartBtn');
const gameUI = document.getElementById('gameUI');

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const platform = {
  x: canvas.width / 4,
  y: canvas.height / 2,
  width: canvas.width / 2,
  height: 100,
};

const player1 = createPlayer(platform.x + platform.width/7, platform);
const player2 = createPlayer(platform.x + platform.width - 100, platform);

let player1SelectedColor = '#FF6347';
let player2SelectedColor = '#4682B4';

setupInputListeners(player1, player2);

function applyGravity(player) {
  const wasGrounded = player.grounded;
  player.dy += GRAVITY;
  const nextY = player.y + player.dy;

  const onPlatform = (
    player.dy > 0 &&
    player.y + player.height <= platform.y &&
    nextY + player.height >= platform.y &&
    player.x + player.width > platform.x &&
    player.x < platform.x + platform.width
  );

  if (onPlatform) {
    player.dy = 0;
    player.y = platform.y - player.height;
    player.grounded = true;
    player.jumping = false;
    player.jumpsLeft = MAX_JUMPS;
    
    if (!wasGrounded && player.dy > 8) {
      player.squishFactor = 0.7;
    } else if (!wasGrounded) {
      player.squishFactor = 0.85;
    }
  } else {
    player.grounded = false;
  }

  player.y += player.dy;
}

function updateStockDisplay(player) {
  const containerId = player === player1 ? 'player1Stock' : 'player2Stock';
  const stockContainer = document.getElementById(containerId);

  stockContainer.innerHTML = '';
  for (let i = 0; i < player.stocks; i++) {
    const heart = document.createElement('img');
    heart.src = 'hearts.png';
    heart.alt = 'Heart';
    stockContainer.appendChild(heart);
  }
}

function updatePercentDisplay(player) {
  const percentId = player === player1 ? 'player1Percent' : 'player2Percent';
  const percentContainer = document.getElementById(percentId);
  percentContainer.textContent = `${Math.round((player.knockbackMultiplier - 1) * 10)}%`;
}

function checkFallOff(player, spawnX) {
  if (player.y > canvas.height) {
    if (player.stocks > 1) {
      player.stocks--;
      updateStockDisplay(player);
      player.x = spawnX;
      player.y = platform.y - player.height;
      player.dy = 0;
      player.jumping = false;
      player.grounded = true;
      player.jumpsLeft = MAX_JUMPS;
      player.knockbackMultiplier = 1;
      player.squishFactor = 1;
      player.stretchFactor = 1;
      player.floatOffset = 0;
    } else {
      player.stocks = 0;
      updateStockDisplay(player);
    }
  }
}

function setupColorSelection(playerColorOptions, playerPreview, playerNumber) {
  playerColorOptions.querySelectorAll('.color-box').forEach(box => {
    const color = box.dataset.color;
    box.style.backgroundColor = color;

    if ((playerNumber === 1 && color === player1SelectedColor) || (playerNumber === 2 && color === player2SelectedColor)) {
      box.classList.add('selected');
    }

    box.addEventListener('click', () => {
      playerColorOptions.querySelectorAll('.color-box').forEach(b => b.classList.remove('selected'));
      box.classList.add('selected');

      if (playerNumber === 1) {
        player1SelectedColor = color;
        player1Preview.style.backgroundColor = color;
      } else {
        player2SelectedColor = color;
        player2Preview.style.backgroundColor = color;
      }
    });
  });
}

setupColorSelection(player1ColorOptions, player1Preview, 1);
setupColorSelection(player2ColorOptions, player2Preview, 2);

startGameBtn.addEventListener('click', () => {
  characterSelectScreen.style.display = 'none';
  gameUI.style.display = 'block';
  gameStarted = true;
  player1.color = player1SelectedColor;
  player2.color = player2SelectedColor;

  resetPlayer(player1, platform.x + platform.width / 7, platform.y - player1.height);
  resetPlayer(player2, platform.x + platform.width - 100, platform.y - player2.height);
  
  updateStockDisplay(player1);
  updateStockDisplay(player2);

  gameLoop();
});

function updateGame() {
  movePlayer(player1, 'a', 'd', canvas);
  movePlayer(player2, 'ArrowLeft', 'ArrowRight', canvas);

  applyGravity(player1);
  applyGravity(player2);
  
  updatePlayerAnimation(player1);
  updatePlayerAnimation(player2);

  player1.dx *= 0.95;
  player2.dx *= 0.95;

  checkFallOff(player1, platform.x + platform.width/7);
  checkFallOff(player2, platform.x + platform.width - 100);

  handlePunching(player1, player2, 'r');
  handlePunching(player2, player1, 'k');

  shootProjectile(player1, 't');
  shootProjectile(player2, 'l');

  updateProjectiles(player1, player2);

  if (!gameOver && (player1.stocks <= 0 || player2.stocks <= 0)) {
    gameOver = true;
    restartBtn.style.display = 'block';
  }

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawPlatform(ctx, platform);
  drawPlayer(ctx, player1, platform);
  drawPlayer(ctx, player2, platform);
  drawPunch(ctx, player1, '#FF0000');
  drawPunch(ctx, player2, '#0000FF');
  drawProjectileCharging(ctx, player1);
  drawProjectileCharging(ctx, player2);
  drawProjectiles(ctx, projectiles);
}

restartBtn.addEventListener('click', () => {
  gameOver = false
    restartBtn.style.display = 'none';
  resetPlayer(player1, platform.x + platform.width/7, platform.y - player1.height);
  resetPlayer(player2, platform.x + platform.width - 100, platform.y - player2.height);
  projectiles.length = 0; // Clear all projectiles
  requestAnimationFrame(gameLoop);
});

function gameLoop() {
  if (!gameStarted) {
    return;
  }

  updateGame();
  updatePercentDisplay(player1);
  updatePercentDisplay(player2);
  
  if (gameOver) {
    drawWinnerText(ctx, canvas, player1);
    return;
  }
  
  requestAnimationFrame(gameLoop);
}

// Initial setup: display character select screen and hide game UI
characterSelectScreen.style.display = 'flex';
gameUI.style.display = 'none';